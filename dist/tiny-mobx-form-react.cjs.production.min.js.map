{"version":3,"file":"tiny-mobx-form-react.cjs.production.min.js","sources":["../src/form-context.ts","../src/field.tsx","../src/form.tsx","../src/hooks.ts"],"sourcesContent":["import { createContext } from 'react';\nimport { IForm } from 'tiny-mobx-form';\n\ninterface FormContextValue {\n  form: IForm;\n}\n\nexport const FormContext = createContext({} as FormContextValue);\n","import React, { useContext } from 'react';\nimport { IField } from 'tiny-mobx-form';\nimport { observer } from 'mobx-react-lite';\n\nimport { FormContext } from './form-context';\n\ntype EventType = React.FormEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\n\ninterface Input extends Pick<IField, 'name' | 'placeholder' | 'value'> {\n  autoFocus: boolean;\n  key: string;\n  id: string;\n  onChange: (e: EventType) => void;\n}\n\ninterface FieldValue {\n  input: Input;\n  label: string;\n  errors: string[];\n  hasErrors: boolean;\n}\n\ninterface FieldProps {\n  name: string;\n  children: (field: FieldValue) => React.ReactNode | React.ReactElement | any;\n}\n\nfunction Field({ name, children }: FieldProps) {\n  const { form } = useContext(FormContext);\n  if (!(name in form.fields)) {\n    throw Error(`There is no field named ${name}`);\n  }\n  const field = form.fields[name];\n  const {\n    placeholder,\n    value,\n    isFocused,\n    label = '',\n    errors,\n    isTouched,\n    hasErrors: fieldHasErrors,\n  } = field;\n  function change(e: EventType) {\n    field.value = e.currentTarget.value;\n  }\n  const input = {\n    name,\n    placeholder,\n    value,\n    id: name,\n    key: `${name}-${isFocused}`,\n    autoFocus: isFocused,\n    onChange: change,\n  };\n  const hasErrors = isTouched && fieldHasErrors;\n\n  return children({ input, errors, hasErrors, label });\n}\n\nexport const ObservedField = observer(Field);\n","import React from 'react';\nimport { Form as FormModel, IFormOptions, IFormSchema, IInitialValues } from 'tiny-mobx-form';\nimport { FormContext } from './form-context';\n\nexport interface FormProps {\n  fields: IFormSchema[];\n  initialValues?: IInitialValues;\n  options?: IFormOptions;\n  children: React.ReactNode;\n}\n\nexport const Form: React.FC<FormProps> = ({\n  fields,\n  initialValues = {},\n  options = {},\n  children,\n}) => {\n  const form = new FormModel(fields, initialValues, options);\n  const value = { form };\n  return <FormContext.Provider value={value}>{children}</FormContext.Provider>;\n};\n","import { useContext } from 'react';\nimport { FormContext } from './form-context';\nimport { IField, IForm } from 'tiny-mobx-form';\n\nexport function useForm(): IForm {\n  const { form } = useContext(FormContext);\n  return form;\n}\n\nexport function useField(fieldName: string): IField {\n  const { form } = useContext(FormContext);\n  if (!(fieldName in form.fields)) {\n    throw Error(`There is no field named ${fieldName}`);\n  }\n  return form.fields[fieldName];\n}\n"],"names":["FormContext","createContext","Field","name","children","form","useContext","fields","Error","field","isFocused","label","input","placeholder","value","id","key","autoFocus","onChange","e","currentTarget","errors","hasErrors","isTouched","observer","initialValues","options","FormModel","React","Provider","fieldName"],"mappings":"sJAOaA,EAAcC,gBAAc,ICoBzC,SAASC,SAAQC,IAAAA,KAAMC,IAAAA,SACbC,EAASC,aAAWN,GAApBK,UACFF,KAAQE,EAAKE,cACXC,iCAAiCL,OAEnCM,EAAQJ,EAAKE,OAAOJ,GAIxBO,EAKED,EALFC,YAKED,EAJFE,aAmBKP,EAAS,CAAEQ,MAXJ,CACZT,KAAAA,EACAU,YANEJ,EAPFI,YAcAC,MAPEL,EANFK,MAcAC,GAAIZ,EACJa,IAAQb,MAAQO,EAChBO,UAAWP,EACXQ,kBAVcC,GACdV,EAAMK,MAAQK,EAAEC,cAAcN,QAaPO,OAfrBZ,EAHFY,OAkB+BC,UAf7Bb,EAFFc,WAEEd,EADFa,UAgB0CX,iBAnBlC,qBAsBiBa,WAAStB,gBChDG,oBAEvCuB,kBACAC,QACAtB,IAAAA,SAEMC,EAAO,IAAIsB,SALjBpB,kBACgB,gBACN,aAKHqB,gBAAC5B,EAAY6B,UAASf,MADf,CAAET,KAAAA,IAC4BD,8BCVrB0B,OACfzB,EAASC,aAAWN,GAApBK,UACFyB,KAAazB,EAAKE,cAChBC,iCAAiCsB,UAElCzB,EAAKE,OAAOuB,sCATFxB,aAAWN,GAApBK"}